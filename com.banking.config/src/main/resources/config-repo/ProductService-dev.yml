# Product Server dev config

server:
  port: 19094

spring:
  application:
    name: ProductService
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
  cloud:
    bus:
      destination: banking-platform.dev.event.config-event.json
      refresh:
        enabled: true
      env:
        enabled: true
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      region: ${AWS_REGION}
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 50MB

  data:
    redis:
      host: localhost
      port: 6379
      username: default
      password: systempass
      timeout: 3000

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/product
    username: banking
    password: banking20

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: false
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_batch_fetch_size: 1000
        enable_lazy_load_no_trans: false
  http:
    encoding:
      enabled: true
      charset: UTF-8
      force: true

eureka:
  client:
    service-url:
      defaultZone: http://localhost:19090/eureka/
    health-check:
      enabled: true
  instance:
    hostname: localhost
    metadata-map:
      instanceId: ${spring.application.name}:${spring.cloud.client.hostname}
    lease-renewal-interval-in-seconds: 30  # 기본값은 30초, 서비스 상태 갱신 주기
    lease-expiration-duration-in-seconds: 90  # 기본값은 90초, 서비스 갱신이 없을 때 만료 시간
    health-check-url-path: /actuator/health # 헬스 체크를 통한 정상작동 확인

management:
  server:
    port: 29094
  endpoints:
    web:
      exposure:
        include: "*, busrefresh, prometheus"
  endpoint:
    health:
      show-details: always
    env:
      show-values: "ALWAYS"
  zipkin:
    tracing:
      endpoint: "http://localhost:9411/api/v2/spans"
  tracing:
    sampling:
      probability: 1.0
  health:
    redis:
      enabled: false
#    kafka:
#      enabled: false
  metrics:
    export:
      prometheus:
        enabled: true
common:
  bean:
    security:
      auth: true
      class: true
service:
  jwt:
    secret-key: "401b09eab3c013d4ca54922bb802bec8fd5318192b0a75f201d8b3727429080fb337591abd3e44453b954555b7a0812e1081c39b740293f765eae731f5a65ed1"
s3:
  bucket-name: cargoflowlib
  path: pdf
test:
  config-name: Product13-Server

logging:
  level:
    org.springframework.cache: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicTypeDescriptor: TRACE

springdoc:
  api-docs:
    version: openapi_3_1
    enabled: true
    path: /v3/api-docs  # 각 서비스의 Swagger API 기본 경로
  enable-spring-security: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json


resilience4j:
  circuitbreaker:
    configs:
      default:  # 기본 구성 이름
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5  # 슬라이딩 윈도우의 크기를 5번의 호출로 설정
        minimumNumberOfCalls: 5  # 서킷 브레이커가 동작하기 위해 필요한 최소한의 호출 수를 5로 설정
        slowCallRateThreshold: 100  # 느린 호출의 비율이 이 임계값(100%)을 초과하면 서킷 브레이커가 동작
        slowCallDurationThreshold: 60000  # 느린 호출의 기준 시간(밀리초)으로, 60초 이상 걸리면 느린 호출로 간주
        failureRateThreshold: 50  # 실패율이 이 임계값(50%)을 초과하면 서킷 브레이커가 동작
        permittedNumberOfCallsInHalfOpenState: 3  # 서킷 브레이커가 Half-open 상태에서 허용하는 최대 호출 수를 3으로 설정
        # 서킷 브레이커가 Open 상태에서 Half-open 상태로 전환되기 전에 기다리는 시간
        waitDurationInOpenState: 20s  # Open 상태에서 Half-open 상태로 전환되기 전에 대기하는 시간을 20초로 설정
