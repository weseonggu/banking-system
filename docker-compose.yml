services:
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - 9411:9411
    networks:
      - my-network

  redis-stack:
    image: redis/redis-stack
    container_name: redis-stack-compose
    restart: always
    command: ["redis-server", "--requirepass", "systempass"]
    ports:
      - 6379:6379
      - 8001:8001 # 레디스 인사이트 접속 포트
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "systempass", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis_exporter:
    image: oliver006/redis_exporter:latest
    restart: always
    ports:
      - "9121:9121"
    networks:
      - my-network
    environment:
      REDIS_PASSWORD: "systempass"
      REDIS_ADDR: "redis-stack:6379"
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc redis-stack 6379 | grep 'imok'" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'banking'
      POSTGRES_PASSWORD: 'banking20'
      TZ: Asia/Seoul
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U banking -d auth" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - my-network

  postgres_exporter:
    image: wrouesnel/postgres_exporter:latest
    restart: always
    environment:
      DATA_SOURCE_NAME: "user=banking password=banking20 host=postgres port=5432 dbname=auth sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc postgres 5432 | grep 'imok'" ]
      interval: 30s
      timeout: 10s
      retries: 3

################################  kafka ####################################################

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/amd64
    ports:
      - "3181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    networks:
      - my-network

  kafka:
    image: wurstmeister/kafka:latest
    platform: linux/amd64
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    restart: always
    ports:
      - "19080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: "false"
    networks:
      - my-network

################################### monitoring #####################################

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    restart: always
    networks:
      - my-network
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - my-network

############################## Microservice ######################################

#  eureka:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: eureka.server
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19090:19090"
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/eureka.server:latest
#    healthcheck:
#      test: ["CMD", "sh", "-c", "curl -s http://localhost:19090/actuator/health | grep '\"status\":\"UP\"'"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s # 컨테이너 시작 후 60초를 기다린 후 체크 시작
#
#  config:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: native # 원하는 프로파일 설정
#        MODULE: config
#    environment:
#      SPRING_PROFILES_ACTIVE: prod
#    ports:
#      - "19000:19000"
#    networks:
#      - my-network
#    depends_on:
#      eureka:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "sh", "-c", "curl -s http://localhost:19000/actuator/health | grep '\"status\":\"UP\"'"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s # 컨테이너 시작 후 60초를 기다린 후 체크 시작
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/config:latest
#
#
#
#
#  gateway:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: gateway
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19092:19092"
#    depends_on:
#      config:
#        condition: service_healthy
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/gateway:latest
#
#
#  auth:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: auth
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19093:19093"
#      - "29093:29093"
#    networks:
#      - my-network
#    depends_on:
#      config:
#        condition: service_healthy
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/auth:latest
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://host.docker.internal:19000/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s # 컨테이너 시작 후 60초를 기다린 후 체크 시작
#
#  personal:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: personal
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19096:19096"
#      - "29096:29096"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    restart: always
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/personal:latest
#    depends_on:
#      config:
#        condition: service_healthy
#
#
#
#  account:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: account
#    environment:
#      SPRING_PROFILES_ACTIVE: prod # 운영 환경 프로파일 설정
#      ENCRYPTOR_PASSWORD: ${ENCRYPTOR_PASSWORD}
#    ports:
#      - "19095:19095"
#      - "29095:29095"
#    depends_on:
#      config:
#        condition: service_healthy
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/account:latest
#
#
#  notification:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: notification
#    environment:
#      SPRING_PROFILES_ACTIVE: prod # 운영 환경 프로파일 설정
#      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
#    ports:
#      - "19097:19097"
#      - "29097:29097"
#    depends_on:
#      config:
#        condition: service_healthy
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/notification:latest
#
#
#  performance:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: performance
#    environment:
#      SPRING_PROFILES_ACTIVE: prod # 운영 환경 프로파일 설정
#      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
#    ports:
#      - "19098:19098"
#      - "29098:29098"
#    depends_on:
#      config:
#        condition: service_healthy
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/performance:latest
#
#
#
#  product:
#    build:
#      dockerfile: ./Dockerfile
#      args:
#        TEST_SPRING_PROFILES_ACTIVE: prod
#        MODULE: product
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#      AWS_REGION: ${AWS_REGION}
#    ports:
#      - "19094:19094"
#      - "29094:29094"
#    depends_on:
#      config:
#        condition: service_healthy
#    networks:
#      - my-network
#    image: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com/sparta/product:latest

############################## Other ######################################

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  my-network:
    driver: bridge